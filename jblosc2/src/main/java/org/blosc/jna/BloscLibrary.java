package org.blosc.jna;

import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import org.blosc.Util;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;

/**
 * JNA Wrapper for library <b>blosc</b><br>
 * This file was autogenerated by
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit
 * <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> ,
 * <a href="http://rococoa.dev.java.net/">Rococoa</a>, or
 * <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class BloscLibrary implements Library {
	static {
		Native.register("blosc" + Util.getArchPlatform());
	}

	public static final int BLOSC_DOSHUFFLE = (int) 0x1;
	public static final int BLOSC_ZSTD_LIB = (int) 4;
	public static final int BLOSC_DOBITSHUFFLE = (int) 0x4;
	public static final int BLOSC_ZSTD = (int) 5;
	public static final int BLOSC_FILTER_SCHUNK = (int) 0x8;
	public static final int BLOSC_SNAPPY = (int) 3;
	public static final int BLOSC_DELTA = (int) 3;
	public static final int BLOSC_MIN_HEADER_LENGTH = (int) 16;
	public static final int BLOSC_LZ4_VERSION_FORMAT = (int) 1;
	public static final int BLOSC_ZLIB_LIB = (int) 3;
	public static final int BLOSC_ZLIB_FORMAT = (int) 3;
	public static final String BLOSC_BLOSCLZ_COMPNAME = (String) "blosclz";
	public static final int BLOSC_BLOSCLZ_FORMAT = (int) 0;
	public static final int BLOSC_LZ4_FORMAT = (int) 1;
	public static final int BLOSC_VERSION_MINOR = (int) 0;
	public static final String BLOSC_VERSION_REVISION = (String) "$Rev$";
	public static final int BLOSC_SNAPPY_FORMAT = (int) 2;
	public static final int BLOSC_VERSION_MAJOR = (int) 2;
	public static final String BLOSC_ZLIB_LIBNAME = (String) "Zlib";
	public static final int BLOSC_ZLIB_VERSION_FORMAT = (int) 1;
	public static final String BLOSC_BLOSCLZ_LIBNAME = (String) "BloscLZ";
	public static final int BLOSC_LZ4HC_VERSION_FORMAT = (int) 1;
	public static final int BLOSC_SNAPPY_VERSION_FORMAT = (int) 1;
	public static final int BLOSC_MAX_FILTERS = (int) 5;
	public static final int BLOSC_ZSTD_VERSION_FORMAT = (int) 1;
	public static final int BLOSC_NOSHUFFLE = (int) 0;
	public static final String BLOSC_ZSTD_LIBNAME = (String) "Zstd";
	public static final String BLOSC_LZ4HC_COMPNAME = (String) "lz4hc";
	public static final int BLOSC_BLOSCLZ_LIB = (int) 0;
	public static final String BLOSC_VERSION_STRING = (String) "2.0.0a4.dev";
	public static final int BLOSC_MAX_OVERHEAD = (int) 16;
	public static final String BLOSC_LZ4_COMPNAME = (String) "lz4";
	public static final int BLOSC_LZ4HC_FORMAT = (int) 1;
	public static final int BLOSC_SNAPPY_LIB = (int) 2;
	public static final int BLOSC_SCHUNK_LIB = (int) 7;
	public static final String BLOSC_SNAPPY_LIBNAME = (String) "Snappy";
	public static final int BLOSC_NOFILTER = (int) 0;
	public static final String BLOSCLZ_VERSION_STRING = (String) "1.0.5";
	public static final int BLOSC_BLOSCLZ = (int) 0;
	public static final String BLOSC_ZLIB_COMPNAME = (String) "zlib";
	public static final int BLOSC_BITSHUFFLE = (int) 2;
	public static final int BLOSC_SHUFFLE = (int) 1;
	public static final String BLOSC_SNAPPY_COMPNAME = (String) "snappy";
	public static final int BLOSC_VERSION_RELEASE = (int) 0;
	public static final String BLOSC_LZ4_LIBNAME = (String) "LZ4";
	public static final int BLOSC_MAX_TYPESIZE = (int) 255;
	public static final String BLOSC_VERSION_DATE = (String) "$Date:: 2016-03-28 #$";
	public static final int BLOSC_VERSION_FORMAT = (int) 3;
	public static final int BLOSC_BLOSCLZ_VERSION_FORMAT = (int) 1;
	public static final int BLOSC_MEMCPYED = (int) 0x2;
	public static final int BLOSC_LZ4HC = (int) 2;
	public static final int BLOSC_ZLIB = (int) 4;
	public static final int BLOSC_ZSTD_FORMAT = (int) 4;
	public static final String BLOSC_ZSTD_COMPNAME = (String) "zstd";
	public static final int BLOSC_LZ4 = (int) 1;
	public static final int BLOSC_LZ4_LIB = (int) 1;

	/**
	 * Original signature : <code>void blosc_init()</code><br>
	 * <i>native declaration : line 128</i>
	 */
	public static native void blosc_init();

	/**
	 * Original signature : <code>void blosc_destroy()</code><br>
	 * <i>native declaration : line 138</i>
	 */
	public static native void blosc_destroy();

	/**
	 * Original signature :
	 * <code>int blosc_compress(int, int, size_t, size_t, const void*, void*, size_t)</code>
	 * <br>
	 * <i>native declaration : line 214</i>
	 */
	public static native int blosc_compress(int clevel, int doshuffle, NativeLong typesize, NativeLong nbytes,
			Buffer src, Buffer dest, NativeLong destsize);

	/**
	 * Original signature :
	 * <code>int blosc_decompress(const void*, void*, size_t)</code><br>
	 * <i>native declaration : line 247</i>
	 */
	public static native int blosc_decompress(Buffer src, Buffer dest, NativeLong destsize);

	/**
	 * Original signature :
	 * <code>int blosc_getitem(const void*, int, int, void*)</code><br>
	 * <i>native declaration : line 258</i>
	 */
	public static native int blosc_getitem(Buffer src, int start, int nitems, Buffer dest);

	/**
	 * Original signature : <code>int blosc_get_nthreads()</code><br>
	 * <i>native declaration : line 265</i>
	 */
	public static native int blosc_get_nthreads();

	/**
	 * Original signature : <code>int blosc_set_nthreads(int)</code><br>
	 * <i>native declaration : line 276</i>
	 */
	public static native int blosc_set_nthreads(int nthreads);

	/**
	 * Original signature : <code>char* blosc_get_compressor()</code><br>
	 * <i>native declaration : line 282</i>
	 */
	public static native String blosc_get_compressor();

	/**
	 * Original signature : <code>int blosc_set_compressor(const char*)</code>
	 * <br>
	 * <i>native declaration : line 294</i><br>
	 * 
	 * @deprecated use the safer methods
	 *             {@link #blosc_set_compressor(java.lang.String)} and
	 *             {@link #blosc_set_compressor(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	public static native int blosc_set_compressor(Pointer compname);

	/**
	 * Original signature : <code>int blosc_set_compressor(const char*)</code>
	 * <br>
	 * <i>native declaration : line 294</i>
	 */
	public static native int blosc_set_compressor(String compname);

	/**
	 * Original signature :
	 * <code>int blosc_compcode_to_compname(int, char**)</code><br>
	 * <i>native declaration : line 304</i>
	 */
	public static native int blosc_compcode_to_compname(int compcode, PointerByReference compname);

	/**
	 * Original signature :
	 * <code>int blosc_compname_to_compcode(const char*)</code><br>
	 * <i>native declaration : line 313</i><br>
	 * 
	 * @deprecated use the safer methods
	 *             {@link #blosc_compname_to_compcode(java.lang.String)} and
	 *             {@link #blosc_compname_to_compcode(com.sun.jna.Pointer)}
	 *             instead
	 */
	@Deprecated
	public static native int blosc_compname_to_compcode(Pointer compname);

	/**
	 * Original signature :
	 * <code>int blosc_compname_to_compcode(const char*)</code><br>
	 * <i>native declaration : line 313</i>
	 */
	public static native int blosc_compname_to_compcode(String compname);

	/**
	 * Original signature : <code>char* blosc_list_compressors()</code><br>
	 * <i>native declaration : line 327</i>
	 */
	public static native String blosc_list_compressors();

	/**
	 * Original signature : <code>char* blosc_get_version_string()</code><br>
	 * <i>native declaration : line 335</i>
	 */
	public static native String blosc_get_version_string();

	/**
	 * Original signature :
	 * <code>int blosc_get_complib_info(char*, char**, char**)</code><br>
	 * <i>native declaration : line 352</i><br>
	 * 
	 * @deprecated use the safer methods
	 *             {@link #blosc_get_complib_info(java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)}
	 *             and
	 *             {@link #blosc_get_complib_info(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)}
	 *             instead
	 */
	@Deprecated
	public static native int blosc_get_complib_info(String compname, PointerByReference complib,
			PointerByReference version);

	/**
	 * Original signature :
	 * <code>int blosc_get_complib_info(char*, char**, char**)</code><br>
	 * <i>native declaration : line 352</i>
	 */
	public static native int blosc_get_complib_info(Buffer compname, PointerByReference complib,
			PointerByReference version);

	/**
	 * Original signature : <code>int blosc_free_resources()</code><br>
	 * <i>native declaration : line 361</i>
	 */
	public static native int blosc_free_resources();

	/**
	 * Original signature :
	 * <code>void blosc_cbuffer_sizes(const void*, size_t*, size_t*, size_t*)</code>
	 * <br>
	 * <i>native declaration : line 375</i>
	 */
	public static native void blosc_cbuffer_sizes(Buffer cbuffer, NativeLongByReference nbytes,
			NativeLongByReference cbytes, NativeLongByReference blocksize);

	/**
	 * Original signature :
	 * <code>void blosc_cbuffer_metainfo(const void*, size_t*, int*)</code><br>
	 * <i>native declaration : line 394</i><br>
	 * 
	 * @deprecated use the safer methods
	 *             {@link #blosc_cbuffer_metainfo(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, java.nio.IntBuffer)}
	 *             and
	 *             {@link #blosc_cbuffer_metainfo(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.sun.jna.ptr.IntByReference)}
	 *             instead
	 */
	@Deprecated
	public static native void blosc_cbuffer_metainfo(Buffer cbuffer, NativeLongByReference typesize,
			IntByReference flags);

	/**
	 * Original signature :
	 * <code>void blosc_cbuffer_metainfo(const void*, size_t*, int*)</code><br>
	 * <i>native declaration : line 394</i>
	 */
	public static native void blosc_cbuffer_metainfo(Buffer cbuffer, NativeLongByReference typesize, IntBuffer flags);

	/**
	 * Original signature :
	 * <code>void blosc_cbuffer_versions(const void*, int*, int*)</code><br>
	 * <i>native declaration : line 405</i><br>
	 * 
	 * @deprecated use the safer methods
	 *             {@link #blosc_cbuffer_versions(com.sun.jna.Pointer, java.nio.IntBuffer, java.nio.IntBuffer)}
	 *             and
	 *             {@link #blosc_cbuffer_versions(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)}
	 *             instead
	 */
	@Deprecated
	public static native void blosc_cbuffer_versions(Buffer cbuffer, IntByReference version, IntByReference versionlz);

	/**
	 * Original signature :
	 * <code>void blosc_cbuffer_versions(const void*, int*, int*)</code><br>
	 * <i>native declaration : line 405</i>
	 */
	public static native void blosc_cbuffer_versions(Buffer cbuffer, IntBuffer version, IntBuffer versionlz);

	/**
	 * Original signature :
	 * <code>char* blosc_cbuffer_complib(const void*)</code><br>
	 * <i>native declaration : line 414</i>
	 */
	public static native ByteBuffer blosc_cbuffer_complib(Buffer cbuffer);

	/**
	 * Original signature :
	 * <code>blosc2_sheader* blosc2_new_schunk(blosc2_sparams*)</code><br>
	 * <i>native declaration : line 476</i>
	 */
	public static native Sheader blosc2_new_schunk(Sparams sparams);

	/**
	 * Original signature :
	 * <code>int blosc2_set_delta_ref(blosc2_sheader*, size_t, void*)</code><br>
	 * <i>native declaration : line 479</i>
	 */
	public static native int blosc2_set_delta_ref(Sheader sheader, NativeLong nbytes, Buffer ref);

	/**
	 * Original signature :
	 * <code>int blosc2_destroy_schunk(blosc2_sheader*)</code><br>
	 * <i>native declaration : line 483</i>
	 */
	public static native int blosc2_destroy_schunk(Sheader sheader);

	/**
	 * Original signature :
	 * <code>size_t blosc2_append_buffer(blosc2_sheader*, size_t, size_t, void*)</code>
	 * <br>
	 * <i>native declaration : line 493</i>
	 */
	public static native NativeLong blosc2_append_buffer(Sheader sheader, NativeLong typesize, NativeLong nbytes,
			Buffer src);

	/**
	 * Original signature :
	 * <code>void* blosc2_packed_append_buffer(void*, size_t, size_t, void*)</code>
	 * <br>
	 * <i>native declaration : line 496</i>
	 */
	public static native Buffer blosc2_packed_append_buffer(Buffer packed, NativeLong typesize, NativeLong nbytes,
			Buffer src);

	/**
	 * Original signature :
	 * <code>int blosc2_decompress_chunk(blosc2_sheader*, int64_t, void*, int)</code>
	 * <br>
	 * <i>native declaration : line 509</i>
	 */
	public static native int blosc2_decompress_chunk(Sheader sheader, long nchunk, Buffer dest, int nbytes);

	/**
	 * Original signature :
	 * <code>int blosc2_packed_decompress_chunk(void*, int, void**)</code><br>
	 * <i>native declaration : line 512</i>
	 */
	public static native int blosc2_packed_decompress_chunk(Buffer packed, int nchunk, PointerByReference dest);

	/**
	 * Original signature :
	 * <code>void* blosc2_pack_schunk(blosc2_sheader*)</code><br>
	 * <i>native declaration : line 516</i>
	 */
	public static native Buffer blosc2_pack_schunk(Sheader sheader);

	/**
	 * Original signature :
	 * <code>blosc2_sheader* blosc2_unpack_schunk(void*)</code><br>
	 * <i>native declaration : line 519</i>
	 */
	public static native Sheader blosc2_unpack_schunk(Buffer packed);

	/**
	 * Original signature :
	 * <code>blosc_context* blosc2_create_cctx(blosc2_context_cparams*)</code>
	 * <br>
	 * <i>native declaration : line 580</i>
	 */
	public static native PointerByReference blosc2_create_cctx(ContextCParams cparams);

	/**
	 * Original signature :
	 * <code>blosc_context* blosc2_create_dctx(blosc2_context_dparams*)</code>
	 * <br>
	 * <i>native declaration : line 587</i>
	 */
	public static native PointerByReference blosc2_create_dctx(ContextDParams dparams);

	/**
	 * Original signature : <code>void blosc2_free_ctx(blosc_context*)</code>
	 * <br>
	 * <i>native declaration : line 595</i><br>
	 * 
	 * @deprecated use the safer method
	 *             {@link #blosc2_free_ctx(com.sun.jna.ptr.PointerByReference)}
	 *             instead
	 */
	@Deprecated
	public static native void blosc2_free_ctx(Pointer context);

	/**
	 * Original signature : <code>void blosc2_free_ctx(blosc_context*)</code>
	 * <br>
	 * <i>native declaration : line 595</i>
	 */
	public static native void blosc2_free_ctx(PointerByReference context);

	/**
	 * Original signature :
	 * <code>int blosc2_compress_ctx(blosc_context*, size_t, const void*, void*, size_t)</code>
	 * <br>
	 * <i>native declaration : line 612</i><br>
	 * 
	 * @deprecated use the safer method
	 *             {@link #blosc2_compress_ctx(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)}
	 *             instead
	 */
	@Deprecated
	public static native int blosc2_compress_ctx(Pointer context, NativeLong nbytes, Pointer src, Pointer dest,
			NativeLong destsize);

	/**
	 * Original signature :
	 * <code>int blosc2_compress_ctx(blosc_context*, size_t, const void*, void*, size_t)</code>
	 * <br>
	 * <i>native declaration : line 612</i>
	 */
	public static native int blosc2_compress_ctx(PointerByReference context, NativeLong nbytes, Buffer src, Buffer dest,
			NativeLong destsize);

	/**
	 * Original signature :
	 * <code>int blosc2_decompress_ctx(blosc_context*, const void*, void*, size_t)</code>
	 * <br>
	 * <i>native declaration : line 634</i><br>
	 * 
	 * @deprecated use the safer method
	 *             {@link #blosc2_decompress_ctx(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)}
	 *             instead
	 */
	@Deprecated
	public static native int blosc2_decompress_ctx(Pointer context, Pointer src, Pointer dest, NativeLong destsize);

	/**
	 * Original signature :
	 * <code>int blosc2_decompress_ctx(blosc_context*, const void*, void*, size_t)</code>
	 * <br>
	 * <i>native declaration : line 634</i>
	 */
	public static native int blosc2_decompress_ctx(PointerByReference context, Buffer src, Buffer dest,
			NativeLong destsize);

	/**
	 * Original signature :
	 * <code>int blosc2_getitem_ctx(blosc_context*, const void*, int, int, void*)</code>
	 * <br>
	 * <i>native declaration : line 646</i><br>
	 * 
	 * @deprecated use the safer method
	 *             {@link #blosc2_getitem_ctx(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, int, com.sun.jna.Pointer)}
	 *             instead
	 */
	@Deprecated
	public static native int blosc2_getitem_ctx(Pointer context, Pointer src, int start, int nitems, Pointer dest);

	/**
	 * Original signature :
	 * <code>int blosc2_getitem_ctx(blosc_context*, const void*, int, int, void*)</code>
	 * <br>
	 * <i>native declaration : line 646</i>
	 */
	public static native int blosc2_getitem_ctx(PointerByReference context, Buffer src, int start, int nitems,
			Buffer dest);

	/**
	 * Original signature : <code>int blosc_get_blocksize()</code><br>
	 * <i>native declaration : line 658</i>
	 */
	public static native int blosc_get_blocksize();

	/**
	 * Original signature : <code>void blosc_set_blocksize(size_t)</code><br>
	 * <i>native declaration : line 664</i>
	 */
	public static native void blosc_set_blocksize(NativeLong blocksize);

	/**
	 * Original signature : <code>void blosc_set_schunk(blosc2_sheader*)</code>
	 * <br>
	 * <i>native declaration : line 672</i>
	 */
	public static native void blosc_set_schunk(Sheader schunk);

	public static class blosc_context extends PointerType {
		public blosc_context(Pointer address) {
			super(address);
		}

		public blosc_context() {
			super();
		}
	};
}
