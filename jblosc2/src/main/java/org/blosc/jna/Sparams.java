package org.blosc.jna;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Sparams extends Structure<Sparams, Sparams.ByValue, Sparams.ByReference > {
	public byte compressor;
	/** the default compressor */
	public byte clevel;
	/**
	 * the compression level and other compress params<br>
	 * C type : uint8_t[5]
	 */
	public byte[] filters = new byte[5];
	/**
	 * the (sequence of) filters<br>
	 * metadata for filters
	 */
	public short filters_meta;
	public Sparams() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("compressor", "clevel", "filters", "filters_meta");
	}
	/**
	 * @param clevel the default compressor<br>
	 * @param filters the compression level and other compress params<br>
	 * C type : uint8_t[5]<br>
	 * @param filters_meta the (sequence of) filters<br>
	 * metadata for filters
	 */
	public Sparams(byte compressor, byte clevel, byte filters[], short filters_meta) {
		super();
		this.compressor = compressor;
		this.clevel = clevel;
		if ((filters.length != this.filters.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.filters = filters;
		this.filters_meta = filters_meta;
	}
	public Sparams(Pointer peer) {
		super(peer);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Sparams newInstance() { return new Sparams(); }
	public static Sparams[] newArray(int arrayLength) {
		return Structure.newArray(Sparams.class, arrayLength);
	}
	public static class ByReference extends Sparams implements Structure.ByReference {
		
	};
	public static class ByValue extends Sparams implements Structure.ByValue {
		
	};
}
