package com.jblosc.jna;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Sheader extends Structure<Sheader, Sheader.ByValue, Sheader.ByReference > {
	public byte version;
	public byte flags1;
	public byte flags2;
	public byte flags3;
	public short compressor;
	/** The default compressor.  Each chunk can override this. */
	public short clevel;
	/** The compression level and other compress params */
	public short filters;
	/** The (sequence of) filters.  3-bit per filter. */
	public short filters_meta;
	/** Metadata for filters */
	public int chunksize;
	/** Size of each chunk.  0 if not a fixed chunksize. */
	public long nchunks;
	/** Number of chunks in super-chunk */
	public long nbytes;
	/** data size + metadata size + header size (uncompressed) */
	public long cbytes;
	/**
	 * data size + metadata size + header size (compressed)<br>
	 * C type : uint8_t*
	 */
	public Pointer filters_chunk;
	/**
	 * Pointer to chunk hosting filter-related data<br>
	 * C type : uint8_t*
	 */
	public Pointer codec_chunk;
	/**
	 * Pointer to chunk hosting codec-related data<br>
	 * C type : uint8_t*
	 */
	public Pointer metadata_chunk;
	/**
	 * Pointer to schunk metadata<br>
	 * C type : uint8_t*
	 */
	public Pointer userdata_chunk;
	/**
	 * Pointer to user-defined data<br>
	 * C type : uint8_t**
	 */
	public PointerByReference data;
	/**
	 * Pointer to chunk data pointers<br>
	 * C type : uint8_t*
	 */
	public Pointer ctx;
	/**
	 * Context for the thread holder.  NULL if not acquired.<br>
	 * C type : uint8_t*
	 */
	public Pointer reserved;
	public Sheader() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("version", "flags1", "flags2", "flags3", "compressor", "clevel", "filters", "filters_meta", "chunksize", "nchunks", "nbytes", "cbytes", "filters_chunk", "codec_chunk", "metadata_chunk", "userdata_chunk", "data", "ctx", "reserved");
	}
	public Sheader(Pointer peer) {
		super(peer);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Sheader newInstance() { return new Sheader(); }
	public static Sheader[] newArray(int arrayLength) {
		return Structure.newArray(Sheader.class, arrayLength);
	}
	public static class ByReference extends Sheader implements Structure.ByReference {
		
	};
	public static class ByValue extends Sheader implements Structure.ByValue {
		
	};
}
