package org.blosc.jna;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ContextDParams extends Structure<ContextDParams, ContextDParams.ByValue, ContextDParams.ByReference > {
	public byte nthreads;
	/**
	 * the number of threads to use internally (1)<br>
	 * C type : blosc2_sheader*
	 */
	public Sheader.ByReference schunk;
	public ContextDParams() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("nthreads", "schunk");
	}
	/**
	 * @param schunk the number of threads to use internally (1)<br>
	 * C type : blosc2_sheader*
	 */
	public ContextDParams(byte nthreads, Sheader.ByReference schunk) {
		super();
		this.nthreads = nthreads;
		this.schunk = schunk;
	}
	public ContextDParams(Pointer peer) {
		super(peer);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected ContextDParams newInstance() { return new ContextDParams(); }
	public static ContextDParams[] newArray(int arrayLength) {
		return Structure.newArray(ContextDParams.class, arrayLength);
	}
	public static class ByReference extends ContextDParams implements Structure.ByReference {
		
	};
	public static class ByValue extends ContextDParams implements Structure.ByValue {
		
	};
}
